import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../models/user_model.dart';
import '../../models/pharmacie_model.dart';
import '../../models/livreur_model.dart';
import '../../models/client_model.dart';
import 'firebase_auth_wrapper.dart';

/// Service d'authentification utilisant la m√©thode KayFoot
class AuthServiceV2 {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Instance unique (Singleton)
  static final AuthServiceV2 _instance = AuthServiceV2._internal();
  factory AuthServiceV2() => _instance;
  AuthServiceV2._internal();

  // Stream de l'utilisateur actuel
  Stream<User?> get authStateChanges => _auth.authStateChanges();

  // Utilisateur actuel
  User? get currentUser => _auth.currentUser;

  // Inscription d'un client
  Future<UserModel?> inscriptionClient({
    required String email,
    required String password,
    required String nomComplet,
    required String telephone,
    required String adresse,
    required String ville,
    String? quartier,
  }) async {
    try {
      print('üìù === INSCRIPTION CLIENT ===');
      
      // √âtape 1: Cr√©er le compte avec le wrapper
      final uid = await FirebaseAuthWrapper.createAccount(email, password);
      
      if (uid == null) {
        throw 'Impossible de cr√©er le compte.';
      }

      // √âtape 2: Cr√©er l'objet UserModel
      final user = UserModel(
        id: uid,
        email: email,
        nom: nomComplet,
        telephone: telephone,
        typeUtilisateur: 'client',
        dateCreation: DateTime.now(),
      );

      // √âtape 3: Cr√©er les documents dans Firestore
      final success = await FirebaseAuthWrapper.createUserDocuments(
        uid: uid,
        email: email,
        nom: nomComplet,
        telephone: telephone,
        typeUtilisateur: 'client',
        dateCreation: user.dateCreation,
        additionalData: {
          'nomComplet': nomComplet,
          'adresse': adresse,
          'ville': ville,
          'quartier': quartier,
        },
      );

      if (!success) {
        // Si l'√©criture √©choue, supprimer le compte
        await currentUser?.delete();
        throw 'Erreur lors de la cr√©ation du profil.';
      }

      print('‚úÖ Inscription client r√©ussie');
      return user;
    } catch (e) {
      print('‚ùå Erreur inscription client: $e');
      rethrow;
    }
  }

  // Inscription d'une pharmacie
  Future<UserModel?> inscriptionPharmacie({
    required String email,
    required String password,
    required String nomGerant,
    required String telephone,
    required String nomPharmacie,
    required String adresse,
    required String ville,
    required double latitude,
    required double longitude,
    required String numeroLicense,
    required String heuresOuverture,
    required String heuresFermeture,
  }) async {
    try {
      print('üìù === INSCRIPTION PHARMACIE ===');
      
      // √âtape 1: Cr√©er le compte avec le wrapper
      final uid = await FirebaseAuthWrapper.createAccount(email, password);
      
      if (uid == null) {
        throw 'Impossible de cr√©er le compte.';
      }

      // √âtape 2: Cr√©er l'objet UserModel
      final user = UserModel(
        id: uid,
        email: email,
        nom: nomGerant,
        telephone: telephone,
        typeUtilisateur: 'pharmacie',
        dateCreation: DateTime.now(),
      );

      // √âtape 3: Cr√©er les documents dans Firestore
      final success = await FirebaseAuthWrapper.createUserDocuments(
        uid: uid,
        email: email,
        nom: nomGerant,
        telephone: telephone,
        typeUtilisateur: 'pharmacie',
        dateCreation: user.dateCreation,
        additionalData: {
          'nomPharmacie': nomPharmacie,
          'adresse': adresse,
          'ville': ville,
          'latitude': latitude,
          'longitude': longitude,
          'numeroLicense': numeroLicense,
          'heuresOuverture': heuresOuverture,
          'heuresFermeture': heuresFermeture,
        },
      );

      if (!success) {
        // Si l'√©criture √©choue, supprimer le compte
        await currentUser?.delete();
        throw 'Erreur lors de la cr√©ation du profil.';
      }

      print('‚úÖ Inscription pharmacie r√©ussie');
      return user;
    } catch (e) {
      print('‚ùå Erreur inscription pharmacie: $e');
      rethrow;
    }
  }

  // Inscription d'un livreur
  Future<UserModel?> inscriptionLivreur({
    required String email,
    required String password,
    required String nomComplet,
    required String telephone,
    required String numeroPermis,
    required String typeVehicule,
    required String numeroVehicule,
  }) async {
    try {
      print('üìù === INSCRIPTION LIVREUR ===');
      
      // √âtape 1: Cr√©er le compte avec le wrapper
      final uid = await FirebaseAuthWrapper.createAccount(email, password);
      
      if (uid == null) {
        throw 'Impossible de cr√©er le compte.';
      }

      // √âtape 2: Cr√©er l'objet UserModel
      final user = UserModel(
        id: uid,
        email: email,
        nom: nomComplet,
        telephone: telephone,
        typeUtilisateur: 'livreur',
        dateCreation: DateTime.now(),
      );

      // √âtape 3: Cr√©er les documents dans Firestore
      final success = await FirebaseAuthWrapper.createUserDocuments(
        uid: uid,
        email: email,
        nom: nomComplet,
        telephone: telephone,
        typeUtilisateur: 'livreur',
        dateCreation: user.dateCreation,
        additionalData: {
          'nomComplet': nomComplet,
          'numeroPermis': numeroPermis,
          'typeVehicule': typeVehicule,
          'numeroVehicule': numeroVehicule,
        },
      );

      if (!success) {
        // Si l'√©criture √©choue, supprimer le compte
        await currentUser?.delete();
        throw 'Erreur lors de la cr√©ation du profil.';
      }

      print('‚úÖ Inscription livreur r√©ussie');
      return user;
    } catch (e) {
      print('‚ùå Erreur inscription livreur: $e');
      rethrow;
    }
  }

  // Connexion g√©n√©rale
  Future<UserModel?> connexion({
    required String email,
    required String password,
  }) async {
    try {
      print('üîê === CONNEXION ===');
      
      // √âtape 1: Se connecter avec le wrapper
      final uid = await FirebaseAuthWrapper.signIn(email, password);
      
      if (uid == null) {
        throw 'Email ou mot de passe incorrect.';
      }

      // √âtape 2: R√©cup√©rer les donn√©es utilisateur
      final user = await FirebaseAuthWrapper.getUserFromFirestore(uid);
      
      if (user == null) {
        throw 'Profil utilisateur non trouv√©.';
      }

      print('‚úÖ Connexion r√©ussie: ${user.typeUtilisateur}');
      return user;
    } catch (e) {
      print('‚ùå Erreur connexion: $e');
      rethrow;
    }
  }

  // R√©cup√©rer l'utilisateur actuel depuis Firestore
  Future<UserModel?> getCurrentUserFromFirestore() async {
    try {
      final uid = FirebaseAuthWrapper.getCurrentUserId();
      if (uid == null) return null;

      return await FirebaseAuthWrapper.getUserFromFirestore(uid);
    } catch (e) {
      print('‚ùå Erreur getCurrentUserFromFirestore: $e');
      return null;
    }
  }

  // R√©cup√©rer le profil sp√©cifique de l'utilisateur
  Future<dynamic> getUserProfile(String uid, String typeUtilisateur) async {
    try {
      return await FirebaseAuthWrapper.getSpecificProfile(uid, typeUtilisateur);
    } catch (e) {
      print('‚ùå Erreur getUserProfile: $e');
      return null;
    }
  }

  // D√©connexion
  Future<void> deconnexion() async {
    try {
      await FirebaseAuthWrapper.signOut();
    } catch (e) {
      print('‚ùå Erreur d√©connexion: $e');
      rethrow;
    }
  }

  // R√©initialiser le mot de passe
  Future<void> reinitialiserMotDePasse(String email) async {
    try {
      await FirebaseAuthWrapper.resetPassword(email);
    } catch (e) {
      print('‚ùå Erreur r√©initialisation mot de passe: $e');
      rethrow;
    }
  }

  // V√©rifier si un email existe d√©j√†
  Future<bool> emailExiste(String email) async {
    try {
      return await FirebaseAuthWrapper.emailExists(email);
    } catch (e) {
      print('‚ùå Erreur v√©rification email: $e');
      return false;
    }
  }

  // Mettre √† jour le mot de passe
  Future<void> changerMotDePasse(String nouveauMotDePasse) async {
    try {
      if (currentUser != null) {
        await currentUser!.updatePassword(nouveauMotDePasse);
      } else {
        throw 'Aucun utilisateur connect√©.';
      }
    } catch (e) {
      print('‚ùå Erreur changement mot de passe: $e');
      if (e is FirebaseAuthException) {
        if (e.code == 'weak-password') {
          throw 'Le mot de passe doit contenir au moins 6 caract√®res.';
        } else if (e.code == 'requires-recent-login') {
          throw 'Veuillez vous reconnecter pour changer votre mot de passe.';
        }
      }
      rethrow;
    }
  }
}