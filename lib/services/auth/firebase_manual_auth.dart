import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../models/user_model.dart';
import '../../models/client_model.dart';
import '../../models/pharmacie_model.dart';
import '../../models/livreur_model.dart';

/// Service d'authentification manuel qui √©vite compl√®tement le bug PigeonUserDetails
/// Utilise des techniques de contournement avanc√©es
class FirebaseManualAuth {
  static final FirebaseAuth _auth = FirebaseAuth.instance;
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Cr√©er un compte en utilisant une approche manuelle
  static Future<String?> createAccountManual({
    required String email,
    required String password,
  }) async {
    try {
      print('üîß === CR√âATION COMPTE MANUELLE ===');
      print('üîß Email: $email');
      
      // Note: setPersistence() n'est disponible que sur web, on l'ignore sur mobile
      
      // M√©thode 2: Utiliser un isolate pour √©viter les conflits
      String? uid;
      Exception? createError;
      
      try {
        // Essayer la cr√©ation avec tous les flags de s√©curit√©
        final userCredential = await _auth.createUserWithEmailAndPassword(
          email: email,
          password: password,
        );
        
        uid = userCredential.user?.uid;
        print('‚úÖ Compte cr√©√© normalement: $uid');
        
      } catch (e) {
        createError = e as Exception;
        print('‚ùå Erreur cr√©ation normale: $e');
        
        // Si c'est le bug PigeonUserDetails, essayer la m√©thode de r√©cup√©ration
        if (e.toString().contains('PigeonUserDetails') || 
            e.toString().contains('List<Object?>')) {
          
          print('üîß Bug PigeonUserDetails d√©tect√©, m√©thode de r√©cup√©ration...');
          
          // Attendre pour laisser Firebase se synchroniser
          await Future.delayed(const Duration(seconds: 2));
          
          // M√©thode de r√©cup√©ration 1: Essayer de se connecter
          try {
            print('üîß Tentative de connexion avec les m√™mes identifiants...');
            
            final signInCredential = await _auth.signInWithEmailAndPassword(
              email: email,
              password: password,
            );
            
            if (signInCredential.user != null) {
              uid = signInCredential.user!.uid;
              print('‚úÖ Compte r√©cup√©r√© par connexion: $uid');
            }
          } catch (signInError) {
            print('‚ùå Connexion de r√©cup√©ration √©chou√©e: $signInError');
            
            // M√©thode de r√©cup√©ration 2: V√©rifier l'√©tat actuel
            await Future.delayed(const Duration(milliseconds: 500));
            
            if (_auth.currentUser != null) {
              uid = _auth.currentUser!.uid;
              print('‚úÖ Utilisateur trouv√© dans l\'√©tat actuel: $uid');
            } else {
              // M√©thode de r√©cup√©ration 3: R√©essayer la cr√©ation
              await Future.delayed(const Duration(seconds: 1));
              
              try {
                // Nettoyer compl√®tement l'√©tat
                await _auth.signOut();
                await Future.delayed(const Duration(milliseconds: 500));
                
                // Note: setPersistence() ignor√© sur mobile
                
                final retryCredential = await _auth.createUserWithEmailAndPassword(
                  email: email,
                  password: password,
                );
                
                uid = retryCredential.user?.uid;
                print('‚úÖ Compte cr√©√© lors du retry: $uid');
                
              } catch (retryError) {
                print('‚ùå Retry √©chou√©: $retryError');
                // Dernier recours: essayer une connexion
                try {
                  final lastTryCredential = await _auth.signInWithEmailAndPassword(
                    email: email,
                    password: password,
                  );
                  uid = lastTryCredential.user?.uid;
                  print('‚úÖ Compte trouv√© en dernier recours: $uid');
                } catch (lastError) {
                  print('‚ùå Dernier recours √©chou√©: $lastError');
                }
              }
            }
          }
        } else {
          // Erreur normale de Firebase
          if (e is FirebaseAuthException) {
            if (e.code == 'email-already-in-use') {
              throw 'Un compte existe d√©j√† avec cette adresse email.';
            } else if (e.code == 'weak-password') {
              throw 'Le mot de passe doit contenir au moins 6 caract√®res.';
            } else if (e.code == 'invalid-email') {
              throw 'L\'adresse email n\'est pas valide.';
            }
          }
          rethrow;
        }
      }
      
      // Note: setPersistence() ignor√© sur mobile
      
      if (uid != null) {
        // Attendre la stabilisation finale
        await Future.delayed(const Duration(milliseconds: 300));
        print('‚úÖ Cr√©ation de compte termin√©e: $uid');
        return uid;
      } else {
        if (createError != null) {
          throw createError;
        }
        throw 'Impossible de cr√©er le compte apr√®s plusieurs tentatives.';
      }
      
    } catch (e) {
      print('‚ùå Erreur createAccountManual: $e');
      rethrow;
    }
  }

  /// Se connecter avec m√©thode manuelle
  static Future<String?> signInManual({
    required String email,
    required String password,
  }) async {
    try {
      print('üîß === CONNEXION MANUELLE ===');
      print('üîß Email: $email');
      
      // Nettoyer l'√©tat
      await _auth.signOut();
      await Future.delayed(const Duration(milliseconds: 200));
      
      String? uid;
      
      try {
        final userCredential = await _auth.signInWithEmailAndPassword(
          email: email,
          password: password,
        );
        
        uid = userCredential.user?.uid;
        print('‚úÖ Connexion normale r√©ussie: $uid');
        
      } catch (e) {
        print('‚ùå Erreur connexion normale: $e');
        
        if (e.toString().contains('PigeonUserDetails') || 
            e.toString().contains('List<Object?>')) {
          
          print('üîß Bug PigeonUserDetails lors de la connexion');
          
          // Attendre et v√©rifier l'√©tat
          await Future.delayed(const Duration(seconds: 1));
          
          if (_auth.currentUser != null) {
            uid = _auth.currentUser!.uid;
            print('‚úÖ Utilisateur trouv√© dans l\'√©tat: $uid');
          } else {
            // R√©essayer apr√®s nettoyage
            await Future.delayed(const Duration(milliseconds: 500));
            
            try {
              final retryCredential = await _auth.signInWithEmailAndPassword(
                email: email,
                password: password,
              );
              uid = retryCredential.user?.uid;
              print('‚úÖ Connexion r√©ussie lors du retry: $uid');
            } catch (retryError) {
              print('‚ùå Retry connexion √©chou√©: $retryError');
              rethrow;
            }
          }
        } else {
          // Erreur normale de Firebase
          if (e is FirebaseAuthException) {
            if (e.code == 'user-not-found') {
              throw 'Aucun compte trouv√© avec cette adresse email.';
            } else if (e.code == 'wrong-password') {
              throw 'Mot de passe incorrect.';
            } else if (e.code == 'invalid-email') {
              throw 'L\'adresse email n\'est pas valide.';
            } else if (e.code == 'user-disabled') {
              throw 'Ce compte a √©t√© d√©sactiv√©.';
            }
          }
          rethrow;
        }
      }
      
      if (uid != null) {
        await Future.delayed(const Duration(milliseconds: 300));
        print('‚úÖ Connexion termin√©e: $uid');
        return uid;
      } else {
        throw 'Impossible de se connecter.';
      }
      
    } catch (e) {
      print('‚ùå Erreur signInManual: $e');
      rethrow;
    }
  }

  /// Cr√©er les documents utilisateur dans Firestore
  static Future<bool> createUserDocuments({
    required String uid,
    required String email,
    required String nom,
    required String telephone,
    required String typeUtilisateur,
    required DateTime dateCreation,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      print('üìù === CR√âATION DOCUMENTS FIRESTORE ===');
      
      // Attendre pour s'assurer que Firebase Auth est stable
      await Future.delayed(const Duration(seconds: 1));
      
      // Document principal dans la collection users
      await _firestore.collection('users').doc(uid).set({
        'email': email,
        'nom': nom,
        'telephone': telephone,
        'typeUtilisateur': typeUtilisateur,
        'dateCreation': Timestamp.fromDate(dateCreation),
      });

      print('‚úÖ Document users cr√©√©');

      // Document sp√©cifique selon le type
      if (typeUtilisateur == 'client' && additionalData != null) {
        await _firestore.collection('clients').doc(uid).set({
          'userId': uid,
          'nomComplet': additionalData['nomComplet'] ?? nom,
          'adresse': additionalData['adresse'] ?? '',
          'ville': additionalData['ville'] ?? '',
          'quartier': additionalData['quartier'],
          'historiqueCommandes': [],
          'favoris': [],
        });
        print('‚úÖ Document client cr√©√©');
      } else if (typeUtilisateur == 'pharmacie' && additionalData != null) {
        await _firestore.collection('pharmacies').doc(uid).set({
          'userId': uid,
          'nomPharmacie': additionalData['nomPharmacie'] ?? '',
          'adresse': additionalData['adresse'] ?? '',
          'ville': additionalData['ville'] ?? '',
          'localisation': GeoPoint(
            additionalData['latitude'] ?? 0.0,
            additionalData['longitude'] ?? 0.0,
          ),
          'numeroLicense': additionalData['numeroLicense'] ?? '',
          'heuresOuverture': additionalData['heuresOuverture'] ?? '08:00',
          'heuresFermeture': additionalData['heuresFermeture'] ?? '20:00',
          'ouvert': true,
          'note': 0.0,
          'nombreAvis': 0,
        });
        print('‚úÖ Document pharmacie cr√©√©');
      } else if (typeUtilisateur == 'livreur' && additionalData != null) {
        await _firestore.collection('livreurs').doc(uid).set({
          'userId': uid,
          'nomComplet': additionalData['nomComplet'] ?? nom,
          'numeroPermis': additionalData['numeroPermis'] ?? '',
          'typeVehicule': additionalData['typeVehicule'] ?? '',
          'numeroVehicule': additionalData['numeroVehicule'] ?? '',
          'disponible': true,
          'localisationActuelle': null,
          'nombreLivraisons': 0,
          'note': 0.0,
        });
        print('‚úÖ Document livreur cr√©√©');
      }

      return true;
    } catch (e) {
      print('‚ùå Erreur createUserDocuments: $e');
      return false;
    }
  }

  /// R√©cup√©rer les donn√©es utilisateur depuis Firestore
  static Future<UserModel?> getUserFromFirestore(String uid) async {
    try {
      final doc = await _firestore.collection('users').doc(uid).get();
      
      if (!doc.exists) {
        print('‚ùå Utilisateur non trouv√© dans Firestore');
        return null;
      }

      final data = doc.data()!;
      print('‚úÖ Donn√©es utilisateur r√©cup√©r√©es: ${data['typeUtilisateur']}');
      
      return UserModel.fromMap({...data, 'id': uid});
    } catch (e) {
      print('‚ùå Erreur getUserFromFirestore: $e');
      return null;
    }
  }

  /// R√©cup√©rer le profil sp√©cifique selon le type d'utilisateur
  static Future<dynamic> getSpecificProfile(String uid, String typeUtilisateur) async {
    try {
      if (typeUtilisateur == 'client') {
        final doc = await _firestore.collection('clients').doc(uid).get();
        if (doc.exists) {
          return ClientModel.fromMap({...doc.data()!, 'id': uid});
        }
      } else if (typeUtilisateur == 'pharmacie') {
        final doc = await _firestore.collection('pharmacies').doc(uid).get();
        if (doc.exists) {
          return PharmacieModel.fromMap({...doc.data()!, 'id': uid});
        }
      } else if (typeUtilisateur == 'livreur') {
        final doc = await _firestore.collection('livreurs').doc(uid).get();
        if (doc.exists) {
          return LivreurModel.fromMap({...doc.data()!, 'id': uid});
        }
      }
      return null;
    } catch (e) {
      print('‚ùå Erreur getSpecificProfile: $e');
      return null;
    }
  }

  /// Obtenir l'UID de l'utilisateur actuel
  static String? getCurrentUserId() {
    try {
      return _auth.currentUser?.uid;
    } catch (e) {
      print('‚ùå Erreur getCurrentUserId: $e');
      return null;
    }
  }

  /// Se d√©connecter
  static Future<void> signOut() async {
    try {
      await _auth.signOut();
      print('‚úÖ D√©connexion r√©ussie');
    } catch (e) {
      print('‚ùå Erreur signOut: $e');
    }
  }

  /// R√©initialiser le mot de passe
  static Future<void> resetPassword(String email) async {
    try {
      await _auth.sendPasswordResetEmail(email: email);
      print('‚úÖ Email de r√©initialisation envoy√©');
    } catch (e) {
      print('‚ùå Erreur resetPassword: $e');
      if (e is FirebaseAuthException) {
        if (e.code == 'user-not-found') {
          throw 'Aucun compte trouv√© avec cette adresse email.';
        }
        throw e.message ?? 'Erreur lors de l\'envoi de l\'email';
      }
      rethrow;
    }
  }

  /// V√©rifier si un email existe d√©j√†
  static Future<bool> emailExists(String email) async {
    try {
      final methods = await _auth.fetchSignInMethodsForEmail(email);
      return methods.isNotEmpty;
    } catch (e) {
      print('‚ùå Erreur emailExists: $e');
      return false;
    }
  }
}