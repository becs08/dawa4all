import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../models/user_model.dart';
import '../../models/client_model.dart';
import '../../models/pharmacie_model.dart';
import '../../models/livreur_model.dart';

/// Service d'authentification simplifi√© pour √©viter le bug PigeonUserDetails
class FirebaseSimpleAuth {
  static final FirebaseAuth _auth = FirebaseAuth.instance;
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Cr√©er un compte avec gestion d'erreur simplifi√©e
  static Future<String?> createAccountSimple({
    required String email,
    required String password,
  }) async {
    try {
      print('üöÄ === CR√âATION COMPTE SIMPLIFI√â ===');
      print('üöÄ Email: $email');
      
      // V√©rifier si email existe d√©j√†
      final existingMethods = await _auth.fetchSignInMethodsForEmail(email);
      if (existingMethods.isNotEmpty) {
        throw 'Un compte existe d√©j√† avec cette adresse email.';
      }
      
      // D√©connexion pr√©ventive
      if (_auth.currentUser != null) {
        await _auth.signOut();
        await Future.delayed(const Duration(milliseconds: 300));
      }

      // Tentative de cr√©ation simple
      UserCredential? credential;
      
      try {
        credential = await _auth.createUserWithEmailAndPassword(
          email: email,
          password: password,
        );
        
        if (credential.user != null) {
          print('‚úÖ Compte cr√©√© avec succ√®s: ${credential.user!.uid}');
          return credential.user!.uid;
        }
        
      } catch (e) {
        print('‚ùå Erreur cr√©ation: $e');
        
        // Si c'est le bug PigeonUserDetails, essayer la r√©cup√©ration
        if (e.toString().contains('PigeonUserDetails') || 
            e.toString().contains('List<Object?>')) {
          
          print('‚ö†Ô∏è Bug PigeonUserDetails d√©tect√©, tentative de r√©cup√©ration...');
          
          // Attendre un peu
          await Future.delayed(const Duration(seconds: 2));
          
          // Essayer de se connecter avec les m√™mes identifiants
          try {
            final signInCredential = await _auth.signInWithEmailAndPassword(
              email: email,
              password: password,
            );
            
            if (signInCredential.user != null) {
              print('‚úÖ Compte r√©cup√©r√© par connexion: ${signInCredential.user!.uid}');
              return signInCredential.user!.uid;
            }
          } catch (signInError) {
            print('‚ùå R√©cup√©ration √©chou√©e: $signInError');
          }
          
          // V√©rifier l'√©tat actuel
          await Future.delayed(const Duration(milliseconds: 500));
          if (_auth.currentUser != null) {
            print('‚úÖ Utilisateur trouv√© dans l\'√©tat: ${_auth.currentUser!.uid}');
            return _auth.currentUser!.uid;
          }
        }
        
        // G√©rer les erreurs Firebase normales
        if (e is FirebaseAuthException) {
          switch (e.code) {
            case 'email-already-in-use':
              throw 'Un compte existe d√©j√† avec cette adresse email.';
            case 'weak-password':
              throw 'Le mot de passe doit contenir au moins 6 caract√®res.';
            case 'invalid-email':
              throw 'L\'adresse email n\'est pas valide.';
          }
        }
        
        rethrow;
      }
      
      throw 'Impossible de cr√©er le compte.';
    } catch (e) {
      print('‚ùå Erreur createAccountSimple: $e');
      rethrow;
    }
  }

  /// Se connecter avec gestion d'erreur simplifi√©e
  static Future<String?> signInSimple({
    required String email,
    required String password,
  }) async {
    try {
      print('üöÄ === CONNEXION SIMPLIFI√âE ===');
      print('üöÄ Email: $email');
      
      // D√©connexion pr√©ventive
      if (_auth.currentUser != null) {
        await _auth.signOut();
        await Future.delayed(const Duration(milliseconds: 300));
      }

      UserCredential? credential;
      
      try {
        credential = await _auth.signInWithEmailAndPassword(
          email: email,
          password: password,
        );
        
        if (credential.user != null) {
          print('‚úÖ Connexion r√©ussie: ${credential.user!.uid}');
          return credential.user!.uid;
        }
        
      } catch (e) {
        print('‚ùå Erreur connexion: $e');
        
        // G√©rer le bug PigeonUserDetails
        if (e.toString().contains('PigeonUserDetails') || 
            e.toString().contains('List<Object?>')) {
          
          print('‚ö†Ô∏è Bug PigeonUserDetails lors connexion');
          
          // Attendre et v√©rifier l'√©tat
          await Future.delayed(const Duration(seconds: 1));
          if (_auth.currentUser != null) {
            print('‚úÖ Utilisateur connect√© malgr√© l\'erreur: ${_auth.currentUser!.uid}');
            return _auth.currentUser!.uid;
          }
        }
        
        // G√©rer les erreurs Firebase normales
        if (e is FirebaseAuthException) {
          switch (e.code) {
            case 'user-not-found':
              throw 'Aucun compte trouv√© avec cette adresse email.';
            case 'wrong-password':
              throw 'Mot de passe incorrect.';
            case 'invalid-email':
              throw 'L\'adresse email n\'est pas valide.';
            case 'user-disabled':
              throw 'Ce compte a √©t√© d√©sactiv√©.';
          }
        }
        
        rethrow;
      }
      
      throw 'Impossible de se connecter.';
    } catch (e) {
      print('‚ùå Erreur signInSimple: $e');
      rethrow;
    }
  }

  /// Cr√©er les documents Firestore
  static Future<bool> createUserDocuments({
    required String uid,
    required String email,
    required String nom,
    required String telephone,
    required String typeUtilisateur,
    required DateTime dateCreation,
    Map<String, dynamic>? additionalData,
  }) async {
    try {
      print('üìù === CR√âATION DOCUMENTS FIRESTORE ===');
      
      // Document principal
      await _firestore.collection('users').doc(uid).set({
        'email': email,
        'nom': nom,
        'telephone': telephone,
        'typeUtilisateur': typeUtilisateur,
        'dateCreation': Timestamp.fromDate(dateCreation),
      });

      print('‚úÖ Document users cr√©√©');

      // Document sp√©cifique selon le type
      if (typeUtilisateur == 'client' && additionalData != null) {
        await _firestore.collection('clients').doc(uid).set({
          'userId': uid,
          'nomComplet': additionalData['nomComplet'] ?? nom,
          'adresse': additionalData['adresse'] ?? '',
          'ville': additionalData['ville'] ?? '',
          'quartier': additionalData['quartier'],
          'historiqueCommandes': [],
          'favoris': [],
        });
        print('‚úÖ Document client cr√©√©');
      } else if (typeUtilisateur == 'pharmacie' && additionalData != null) {
        await _firestore.collection('pharmacies').doc(uid).set({
          'userId': uid,
          'nomPharmacie': additionalData['nomPharmacie'] ?? '',
          'adresse': additionalData['adresse'] ?? '',
          'ville': additionalData['ville'] ?? '',
          'localisation': GeoPoint(
            additionalData['latitude'] ?? 0.0,
            additionalData['longitude'] ?? 0.0,
          ),
          'numeroLicense': additionalData['numeroLicense'] ?? '',
          'heuresOuverture': additionalData['heuresOuverture'] ?? '08:00',
          'heuresFermeture': additionalData['heuresFermeture'] ?? '20:00',
          'telephonePharmacie': additionalData['telephone'] ?? '',
          'horaires24h': additionalData['horaires24h'] ?? false,
          'estOuverte': additionalData['estOuverte'] ?? true,
          'horairesDetailles': additionalData['horairesDetailles'] ?? {},
          'horairesOuverture': additionalData['horairesOuverture'] ?? '',
          'joursGarde': additionalData['joursGarde'] ?? [],
          'ouvert': true,
          'note': additionalData['note'] ?? 0.0,
          'nombreAvis': additionalData['nombreAvis'] ?? 0,
          'photoUrl': additionalData['photoUrl'],
        });
        print('‚úÖ Document pharmacie cr√©√© avec tous les champs: ${additionalData['joursGarde']}');
      } else if (typeUtilisateur == 'livreur' && additionalData != null) {
        await _firestore.collection('livreurs').doc(uid).set({
          'userId': uid,
          'nomComplet': additionalData['nomComplet'] ?? nom,
          'numeroPermis': additionalData['numeroPermis'] ?? '',
          'typeVehicule': additionalData['typeVehicule'] ?? '',
          'numeroVehicule': additionalData['numeroVehicule'] ?? '',
          'disponible': true,
          'localisationActuelle': null,
          'nombreLivraisons': 0,
          'note': 0.0,
        });
        print('‚úÖ Document livreur cr√©√©');
      }

      return true;
    } catch (e) {
      print('‚ùå Erreur createUserDocuments: $e');
      return false;
    }
  }

  /// R√©cup√©rer utilisateur depuis Firestore
  static Future<UserModel?> getUserFromFirestore(String uid) async {
    try {
      final doc = await _firestore.collection('users').doc(uid).get();
      
      if (!doc.exists) {
        print('‚ùå Utilisateur non trouv√© dans Firestore');
        return null;
      }

      final data = doc.data()!;
      print('‚úÖ Donn√©es utilisateur r√©cup√©r√©es: ${data['typeUtilisateur']}');
      
      return UserModel.fromMap({...data, 'id': uid});
    } catch (e) {
      print('‚ùå Erreur getUserFromFirestore: $e');
      return null;
    }
  }

  /// R√©cup√©rer profil sp√©cifique
  static Future<dynamic> getSpecificProfile(String uid, String typeUtilisateur) async {
    try {
      if (typeUtilisateur == 'client') {
        final doc = await _firestore.collection('clients').doc(uid).get();
        if (doc.exists) {
          return ClientModel.fromMap({...doc.data()!, 'id': uid});
        }
      } else if (typeUtilisateur == 'pharmacie') {
        final doc = await _firestore.collection('pharmacies').doc(uid).get();
        if (doc.exists) {
          return PharmacieModel.fromMap({...doc.data()!, 'id': uid});
        }
      } else if (typeUtilisateur == 'livreur') {
        final doc = await _firestore.collection('livreurs').doc(uid).get();
        if (doc.exists) {
          return LivreurModel.fromMap({...doc.data()!, 'id': uid});
        }
      }
      return null;
    } catch (e) {
      print('‚ùå Erreur getSpecificProfile: $e');
      return null;
    }
  }

  /// Obtenir UID utilisateur actuel
  static String? getCurrentUserId() {
    try {
      return _auth.currentUser?.uid;
    } catch (e) {
      print('‚ùå Erreur getCurrentUserId: $e');
      return null;
    }
  }

  /// Se d√©connecter
  static Future<void> signOut() async {
    try {
      await _auth.signOut();
      print('‚úÖ D√©connexion r√©ussie');
    } catch (e) {
      print('‚ùå Erreur signOut: $e');
    }
  }

  /// R√©initialiser mot de passe
  static Future<void> resetPassword(String email) async {
    try {
      await _auth.sendPasswordResetEmail(email: email);
      print('‚úÖ Email de r√©initialisation envoy√©');
    } catch (e) {
      print('‚ùå Erreur resetPassword: $e');
      if (e is FirebaseAuthException) {
        if (e.code == 'user-not-found') {
          throw 'Aucun compte trouv√© avec cette adresse email.';
        }
        throw e.message ?? 'Erreur lors de l\'envoi de l\'email';
      }
      rethrow;
    }
  }

  /// V√©rifier si email existe
  static Future<bool> emailExists(String email) async {
    try {
      final methods = await _auth.fetchSignInMethodsForEmail(email);
      return methods.isNotEmpty;
    } catch (e) {
      print('‚ùå Erreur emailExists: $e');
      return false;
    }
  }
}