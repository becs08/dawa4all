import 'package:cloud_firestore/cloud_firestore.dart';

/// Utilitaires pour cr√©er des donn√©es de test
class TestDataUtils {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Cr√©er des pharmacies de test
  static Future<void> createTestPharmacies() async {
    try {
      print('üß™ === CR√âATION DES DONN√âES DE TEST ===');

      // Quelques pharmacies de test avec diff√©rentes localisations
      final testPharmacies = [
        {
          'nomPharmacie': 'Pharmacie du Centre',
          'adresse': '15 Avenue Bourguiba',
          'ville': 'Dakar',
          'localisation': const GeoPoint(14.6937, -17.4441), // Dakar centre
          'numeroLicense': 'PH001',
          'heuresOuverture': '08:00',
          'heuresFermeture': '20:00',
          'estOuverte': true,
          'note': 4.5,
          'nombreAvis': 23,
        },
        {
          'nomPharmacie': 'Pharmacie de la Paix',
          'adresse': '42 Rue de la R√©publique',
          'ville': 'Dakar',
          'localisation': const GeoPoint(14.6928, -17.4467), // Proche du centre
          'numeroLicense': 'PH002',
          'heuresOuverture': '07:30',
          'heuresFermeture': '19:30',
          'estOuverte': true,
          'note': 4.2,
          'nombreAvis': 18,
        },
        {
          'nomPharmacie': 'Pharmacie Moderne',
          'adresse': '88 Boulevard du Centenaire',
          'ville': 'Dakar',
          'localisation': const GeoPoint(14.6851, -17.4536), // Un peu plus loin
          'numeroLicense': 'PH003',
          'heuresOuverture': '09:00',
          'heuresFermeture': '18:00',
          'estOuverte': false, // Ferm√©e pour tester les filtres
          'note': 3.8,
          'nombreAvis': 12,
        },
        {
          'nomPharmacie': 'Pharmacie Plateau',
          'adresse': '12 Place de l\'Ind√©pendance',
          'ville': 'Dakar',
          'localisation': const GeoPoint(14.6919, -17.4484),
          'numeroLicense': 'PH004',
          'heuresOuverture': '08:30',
          'heuresFermeture': '19:00',
          'estOuverte': true,
          'note': 4.7,
          'nombreAvis': 31,
        },
        {
          'nomPharmacie': 'Pharmacie de la M√©dina',
          'adresse': '67 Rue 10',
          'ville': 'Dakar',
          'localisation': const GeoPoint(14.6775, -17.4580), // M√©dina
          'numeroLicense': 'PH005',
          'heuresOuverture': '07:00',
          'heuresFermeture': '21:00',
          'estOuverte': true,
          'note': 4.1,
          'nombreAvis': 19,
        },
      ];

      // Supprimer les anciennes donn√©es de test (optionnel)
      final existingDocs = await _firestore.collection('pharmacies').get();
      for (var doc in existingDocs.docs) {
        await doc.reference.delete();
      }

      // Cr√©er les nouvelles pharmacies de test
      for (var pharmacie in testPharmacies) {
        await _firestore.collection('pharmacies').add(pharmacie);
        print('‚úÖ Pharmacie cr√©√©e: ${pharmacie['nomPharmacie']}');
      }

      print('üéâ Toutes les pharmacies de test ont √©t√© cr√©√©es !');
    } catch (e) {
      print('‚ùå Erreur lors de la cr√©ation des donn√©es de test: $e');
    }
  }

  /// Cr√©er des m√©dicaments de test
  static Future<void> createTestMedicaments() async {
    try {
      print('üß™ === CR√âATION DES M√âDICAMENTS DE TEST ===');

      // R√©cup√©rer les pharmacies
      final pharmaciesSnapshot = await _firestore.collection('pharmacies').get();
      if (pharmaciesSnapshot.docs.isEmpty) {
        print('‚ö†Ô∏è Aucune pharmacie trouv√©e. Cr√©ez d\'abord les pharmacies de test.');
        return;
      }

      final medicamentsTest = [
        {
          'nom': 'Parac√©tamol 500mg',
          'description': 'Antalgique et antipyr√©tique',
          'prix': 2500,
          'stock': 150,
          'estDisponible': true,
          'necessite0rdonnance': false,
        },
        {
          'nom': 'Ibuprofen 400mg',
          'description': 'Anti-inflammatoire non st√©ro√Ødien',
          'prix': 3200,
          'stock': 75,
          'estDisponible': true,
          'necessite0rdonnance': false,
        },
        {
          'nom': 'Amoxicilline 500mg',
          'description': 'Antibiotique p√©nicilline',
          'prix': 5800,
          'stock': 40,
          'estDisponible': true,
          'necessite0rdonnance': true,
        },
        {
          'nom': 'Doliprane 1000mg',
          'description': 'Parac√©tamol haute dose',
          'prix': 4200,
          'stock': 0,
          'estDisponible': false,
          'necessite0rdonnance': false,
        },
      ];

      // Ajouter des m√©dicaments √† chaque pharmacie
      for (var pharmacieDoc in pharmaciesSnapshot.docs) {
        for (var medicament in medicamentsTest) {
          // Ajouter l'ID de la pharmacie
          final medicamentData = {
            ...medicament,
            'pharmacieId': pharmacieDoc.id,
            'pharmacieNom': pharmacieDoc.data()['nomPharmacie'],
          };

          await _firestore.collection('medicaments').add(medicamentData);
        }
        print('‚úÖ M√©dicaments ajout√©s √†: ${pharmacieDoc.data()['nomPharmacie']}');
      }

      print('üéâ Tous les m√©dicaments de test ont √©t√© cr√©√©s !');
    } catch (e) {
      print('‚ùå Erreur lors de la cr√©ation des m√©dicaments de test: $e');
    }
  }

  /// Cr√©er toutes les donn√©es de test
  static Future<void> createAllTestData() async {
    await createTestPharmacies();
    await createTestMedicaments();
    print('üöÄ Toutes les donn√©es de test ont √©t√© cr√©√©es !');
  }
}